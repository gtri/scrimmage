FROM centos:7 as builder

MAINTAINER Kevin DeMarco
ENV DEBIAN_FRONTEND noninteractive
SHELL ["/bin/bash", "-c"]

# Setup directories to work in
RUN mkdir -p /root/installs /root/rpms /root/3rd-party

# Install basic dependencies
RUN yum -y update && yum clean all && yum -y install \
    wget \
    which \
    tar \
    xz \
    gcc \
    gcc-c++ \
    bzip2 \
    ruby-devel \
    curl \
    libyaml-devel \
    git \
    rpmdevtools \
    rpmlint \
    yum-utils \
    bzip2-devel

###############################################################################
# Install FPM
###############################################################################
# get the ruby version manager and install
RUN command curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -
RUN command curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -
RUN curl -L get.rvm.io | bash -s stable
RUN source /etc/profile.d/rvm.sh

# install ruby 1.9.3
RUN source /etc/profile.d/rvm.sh && rvm requirements
RUN source /etc/profile.d/rvm.sh && rvm install 2.5
RUN source /etc/profile.d/rvm.sh && rvm use 2.5 --default

# install rubygems
RUN source /etc/profile.d/rvm.sh && rvm rubygems current

# install effing package manager
RUN source /etc/profile.d/rvm.sh && gem install fpm

###############################################################################
# The PREFIX used for all built RPM packages
ARG PKG_PREFIX=/opt/scrimmage

###############################################################################
# Install gcc 7.2.0
###############################################################################
WORKDIR /root/3rd-party
RUN wget https://ftp.gnu.org/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.xz \
    && tar xJvf gcc-7.2.0.tar.xz

WORKDIR gcc-7.2.0
RUN ./contrib/download_prerequisites \
    && ./configure --disable-multilib --enable-languages=c,c++ --prefix=${PKG_PREFIX} \
    && make -j 8 \
    && make DESTDIR=/root/installs/gcc install

# Build RPM package, install RPM, test installation
RUN source /etc/profile.d/rvm.sh && cd /root/installs/gcc \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-gcc --version 7.2.0 \
           --package scrimmage_gcc_VERSION_ARCH.rpm ./ \
    && rpm -ivh /root/installs/gcc/*.rpm \
    && echo "${PKG_PREFIX}/lib64" > /etc/ld.so.conf.d/scrimmage-gcc72.conf \
    && ldconfig \
    && ${PKG_PREFIX}/bin/gcc --version

# Use the new compiler for the following builds
ENV CC ${PKG_PREFIX}/bin/gcc
ENV CXX ${PKG_PREFIX}/bin/g++

# Update standard environment variables
ENV PATH="${PKG_PREFIX}/bin:${PATH}"
ENV CMAKE_PREFIX_PATH ${PKG_PREFIX}
ENV CPATH ${PKG_PREFIX}/include
ENV PKG_CONFIG_PATH ${PKG_PREFIX}/lib/pkgconfig

###############################################################################
# Build CMake
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/Kitware/CMake.git
WORKDIR CMake
RUN git checkout v3.5.1

RUN LDFLAGS='-Wl,-rpath=\$ORIGIN/../lib:\$ORIGIN/../lib64' \
    ./bootstrap --prefix=${PKG_PREFIX} \
    && make -j $(($(nproc)-1)) \
    && make DESTDIR=/root/installs/cmake install

# Build RPM package for cmake
RUN source /etc/profile.d/rvm.sh && cd /root/installs/cmake \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-cmake --version 3.5.1 \
           --package scrimmage_cmake_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/cmake/*.rpm \
    && cmake --version

###############################################################################
# Build Python
###############################################################################
WORKDIR /root/3rd-party
RUN wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz
RUN tar xvf Python-2.7.12.tgz
WORKDIR Python-2.7.12
RUN LDFLAGS='-Wl,-rpath=\$$ORIGIN/../lib:\$$ORIGIN/../lib64' \
    ./configure --prefix=${PKG_PREFIX} --enable-shared --enable-unicode=ucs4 \
    && make -j $(($(nproc)-1)) && make DESTDIR=/root/installs/python install

# Build RPM package for python
RUN source /etc/profile.d/rvm.sh && cd /root/installs/python \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-python --version 2.7.12 \
           --package scrimmage_python_VERSION_ARCH.rpm ./ \
    && rpm -ivh /root/installs/python/*.rpm \
    && python --version

###############################################################################
# Build Boost
###############################################################################
WORKDIR /root/3rd-party
RUN wget http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.gz
RUN tar xvf boost_1_58_0.tar.gz
WORKDIR boost_1_58_0
RUN echo "using gcc : 7.2 : ${PKG_PREFIX}/bin/g++ : <linkflags>\"-Wl,-rpath,\\\\\$ORIGIN/../lib\" ;" >> ./tools/build/example/user-config.jam \
    && cp ./tools/build/example/user-config.jam ./tools/build/src/user-config.jam

RUN ./bootstrap.sh --prefix=/root/installs/boost${PKG_PREFIX} \
    && ./b2 -d 2 \
    && ./b2 install

# Build RPM package for boost
RUN source /etc/profile.d/rvm.sh && cd /root/installs/boost \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-boost --version 1.58 \
           --package scrimmage_boost_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/boost/*.rpm

# Help other projects find boost
ENV BOOST_ROOT ${PKG_PREFIX}

#############################################################################
# Build Eigen
###############################################################################
WORKDIR /root/3rd-party
RUN wget bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2
RUN tar xvf 3.3.4.tar.bz2
WORKDIR eigen-eigen-5a0156e40feb
RUN mkdir build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX=${PKG_PREFIX} \
    && make -j $(($(nproc)-1)) && make DESTDIR=/root/installs/eigen install

# Build RPM package for eigen
RUN source /etc/profile.d/rvm.sh && cd /root/installs/eigen \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-eigen --version 3.3.4 \
           --package scrimmage_eigen_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/eigen/*.rpm

###############################################################################
# Build GeographicLib
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://git.code.sf.net/p/geographiclib/code geographiclib
WORKDIR geographiclib
RUN git checkout v1.45 && mkdir build && cd build \
    && cmake .. -DCMAKE_INSTALL_PREFIX=${PKG_PREFIX} \
                -DCMAKE_INSTALL_RPATH=\$ORIGIN/../lib:\$ORIGIN/../lib64 \
    && make -j $(($(nproc)-1)) && make DESTDIR=/root/installs/geographiclib install

# Build RPM package for geographiclib
RUN source /etc/profile.d/rvm.sh && cd /root/installs/geographiclib \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-geographiclib --version 1.45 \
           --package scrimmage_geographiclib_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/geographiclib/*.rpm

###############################################################################
# RapidXML Package
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/dwd/rapidxml.git && cd rapidxml \
    && git checkout f0058ab9374643018c1db3de521e44d4d52b8f5d
RUN rm -rf ./rapidxml/{.git,test}
RUN mkdir -p /root/installs/rapidxml${PKG_PREFIX}/include \
    && cp -r ./rapidxml /root/installs/rapidxml${PKG_PREFIX}/include

# Build RPM package for rapidxml
RUN source /etc/profile.d/rvm.sh && cd /root/installs/rapidxml \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-rapidxml --version 1.00 \
           --package scrimmage_rapidxml_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/rapidxml/*.rpm

###############################################################################
# Build PyBind11
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/pybind/pybind11.git && cd pybind11 \
    && git checkout v2.2.3 && mkdir -p ./build
WORKDIR ./pybind11/build
RUN cmake .. -DPYBIND11_TEST:BOOL=OFF -DCMAKE_INSTALL_PREFIX=${PKG_PREFIX} \
    && make && make DESTDIR=/root/installs/pybind11 install

# Build RPM package
RUN source /etc/profile.d/rvm.sh && cd /root/installs/pybind11 \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-pybind11 --version 2.2.3 \
           --package scrimmage_pybind11_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/pybind11/*.rpm

###############################################################################
# Build Protobuf
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/google/protobuf.git && cd protobuf \
    && git checkout v3.3.0
WORKDIR ./protobuf
RUN ./autogen.sh \
    && LDFLAGS='-Wl,-rpath=\$$ORIGIN/../lib:\$$ORIGIN/../lib64' \
       ./configure --prefix=${PKG_PREFIX} \
    && make DESTDIR=/root/installs/protobuf install

# Build RPM package
RUN source /etc/profile.d/rvm.sh && cd /root/installs/protobuf \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-protobuf --version 3.3.0 \
           --package scrimmage_protobuf_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/protobuf/*.rpm

###############################################################################
# Build GRPC
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/grpc/grpc && cd grpc \
    && git checkout v1.2.1
WORKDIR ./grpc
# remove warnings as errors, build, install
RUN git submodule update --init --recursive
RUN sed -i -- "s/-Wextra -Werror -Wno-long-long/-Wextra -Wno-long-long/g" ./Makefile \
    && LD_LIBRARY_PATH=${PKG_PREFIX}/lib:${PKG_PREFIX}/lib64 \
       LDFLAGS='-Wl,-rpath=\$ORIGIN/../lib:\$ORIGIN/../lib64' \
       make HAS_SYSTEM_PROTOBUF=true PROTOC=${PKG_PREFIX}/bin/protoc -j $(($(nproc)-1)) \
    && make install prefix=/root/installs/grpc${PKG_PREFIX}

# Build RPM package for grpc
RUN source /etc/profile.d/rvm.sh && cd /root/installs/grpc \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-grpc --version 1.2.1 \
           --package scrimmage_grpc_VERSION_ARCH.rpm ./ \
    && rpm -ivh --force /root/installs/grpc/*.rpm

###############################################################################
# Clone and Setup CMakeDebSrc
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/SyllogismRXS/CMakeDebSrc.git
RUN cd CMakeDebSrc && mkdir build && cd build && cmake ..

###############################################################################
# Build JSBsim from scrimmage's 3rd-party
###############################################################################
WORKDIR /root/3rd-party
RUN git clone https://github.com/gtri/scrimmage.git
WORKDIR ./scrimmage/3rd-party
RUN mkdir ./build && cd build \
    && cmake .. -DCMAKE_INSTALL_PREFIX=/root/installs/jsbsim${PKG_PREFIX}

WORKDIR ./build
RUN make jsbsim -j $(($(nproc)-1))

# Build RPM package for jsbsim
RUN source /etc/profile.d/rvm.sh && cd /root/installs/jsbsim \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-jsbsim --version 0.1.0 \
           --package scrimmage_jsbsim_VERSION_ARCH.rpm ./ \
    && rpm -ivh /root/installs/jsbsim/*.rpm

###############################################################################
# Build VTK
###############################################################################
RUN yum -y install \
    libX11-devel \
    mesa-libGL \
    mesa-libGL-devel \
    libXt-devel

WORKDIR /root/3rd-party
RUN git clone https://github.com/Kitware/VTK.git \
    && cd VTK \
    && git checkout v6.2.0

# Apply patch to allow gcc 7.2.0
RUN sed -i 's/345/3457/g' ./VTK/CMake/vtkCompilerExtras.cmake && \
    sed -i 's/ARGS//g' ./VTK/CMake/vtkCompilerExtras.cmake && \
    sed -i 's/345/3457/g' ./VTK/CMake/GenerateExportHeader.cmake

RUN cd VTK \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_INSTALL_PREFIX=${PKG_PREFIX} -DBUILD_TESTING=OFF \
    && make -j $(($(nproc)-1)) \
    && make DESTDIR=/root/installs/vtk install

# Build RPM package for VTK
RUN source /etc/profile.d/rvm.sh && cd /root/installs/vtk \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage-vtk --version 6.2.0 \
           --package scrimmage_vtk_VERSION_ARCH.rpm .${PKG_PREFIX}/=${PKG_PREFIX} \
    && rpm -ivh /root/installs/vtk/*.rpm

###############################################################################
# Build SCRIMMAGE
###############################################################################
WORKDIR /root/3rd-party/scrimmage
RUN mkdir build && cd build \
    && cmake .. -DCMAKE_INSTALL_PREFIX=${PKG_PREFIX} \
                -DCMAKE_INSTALL_RPATH=\$ORIGIN/../lib:\$ORIGIN/../lib64:\$ORIGIN/../lib/scrimmage/plugin_libs \
                -DENABLE_LD_SO_CONF_INSTALL=OFF
RUN cd build \
    && LD_LIBRARY_PATH=${PKG_PREFIX}/lib \
       make -j $(($(nproc)-1)) && make DESTDIR=/root/installs/scrimmage install

# Build RPM package for scrimmage
RUN source /etc/profile.d/rvm.sh && cd /root/installs/scrimmage \
    && fpm --force --input-type dir --output-type rpm \
           --name scrimmage --version 0.2.0 \
           --package scrimmage_VERSION_ARCH.rpm ./

###############################################################################
# Place all generated rpm files in common folder for later extraction
###############################################################################
RUN find /root/installs -type f -name '*.rpm' -exec mv -i {} /root/rpms \;

###############################################################################
# Install packages in clean image and run a scrimmage mission
###############################################################################
FROM centos:7 as tester

MAINTAINER Kevin DeMarco
ENV DEBIAN_FRONTEND noninteractive
SHELL ["/bin/bash", "-c"]

RUN yum -y install \
    libX11 \
    mesa-libGL \
    libXt

# Copy over the RPMS from the builder image
RUN mkdir -p /root/rpms
COPY --from=builder /root/rpms/*.rpm /root/rpms/

# Install the run-time RPMs
WORKDIR /root/rpms
RUN rpm -ivh scrimmage_gcc*.rpm \
             scrimmage_python*.rpm \
             scrimmage_boost*.rpm \
             scrimmage_geographiclib*.rpm \
             scrimmage_jsbsim*.rpm \
             scrimmage_grpc*.rpm \
             scrimmage_protobuf*.rpm \
             scrimmage_vtk*.rpm \
             scrimmage_0.2.0*.rpm

ARG PKG_PREFIX=/opt/scrimmage
ENV JSBSIM_ROOT ${PKG_PREFIX}/etc/JSBSim

# Run a scrimmage mission
RUN source /opt/scrimmage/etc/scrimmage/env/scrimmage-setenv \
    && scrimmage /opt/scrimmage/share/scrimmage/missions/straight-no-gui.xml
