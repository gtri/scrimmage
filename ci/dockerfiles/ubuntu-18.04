###############################################################################
# Dockerfile to build SCRIMMAGE
###############################################################################
FROM ubuntu:18.04 as dependencies

MAINTAINER Eric Squires
ENV DEBIAN_FRONTEND noninteractive
SHELL ["/bin/bash", "-c"]

# Install initial dependencies and setup .bashrc
RUN apt-get update \
 && apt-get install -y \
    gnupg \
 && echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros-latest.list \
 && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \
 && apt-get update \
 && apt-get install -y \
    ros-melodic-desktop-full \
    software-properties-common \
    cppcheck \
    python-pytest \
    python-pip \
    git \
    ninja-build \
    clang \
    ruby-full \
    build-essential \
    zlib1g-dev \
    python3-pip \
    libgeographic-dev \
    libeigen3-dev \
    librapidxml-dev \
    libboost-thread-dev \
    libboost-date-time-dev \
    libboost-graph-dev \
    libboost-iostreams-dev \
    libboost-program-options-dev \
    libboost-regex-dev \
    libboost-filesystem-dev \
    libboost-system-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libgeographic-dev \
    protobuf-compiler-grpc \
    libpython3.7-dev \
    doxygen python-sphinx \
    sphinx-rtd-theme-common \
    lcov \
 && add-apt-repository ppa:kevin-demarco/scrimmage-bionic \
 && apt-get update \
 && apt-get install -y scrimmage-dependencies \
 && rm -rf /var/lib/apt/lists/* \
 && rosdep init && rosdep update \
 && echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc \
 && /opt/scrimmage/*/setup.sh \
 && pip install cpplint \
    protobuf==3.3.0 \
    grpcio==1.2.1 \
    gym==0.10.11 \
    sphinx-git

# Install jekyll
RUN echo 'export GEM_HOME="$HOME/gems"' >> ~/.bashrc \
 && echo 'export PATH="$HOME/gems/bin:$PATH"' >> ~/.bashrc \
 && source ~/.bashrc \
 && gem update --system \
 && gem install jekyll bundler

# Copy install binaries script into image and run
COPY ./setup/install-binaries.sh /root/install-binaries.sh
RUN /root/install-binaries.sh -e 0 -p 3 \
 && rm -rf /var/lib/apt/lists/*

FROM dependencies as builder

# Copy repo code into image
RUN mkdir -p /root/scrimmage/scrimmage
COPY ./ /root/scrimmage/scrimmage

# # Run static analysis tests
# WORKDIR /root/scrimmage/scrimmage
# RUN find -name __pycache__ -o -name "*.pyc" | xargs rm -rfv \
#  && py.test test/test_cppcheck.py \
#  && python test/test_cpplint.py

# Test Plugin Generation
WORKDIR /root/scrimmage/scrimmage/scripts
RUN ./create-scrimmage-project.py my-scrimmage-plugins ~/scrimmage \
 && ./generate-plugin.sh autonomy AutonomyTest ~/scrimmage/my-scrimmage-plugins \
 && ./generate-plugin.sh interaction InteractionTest ~/scrimmage/my-scrimmage-plugins \
 && ./generate-plugin.sh metrics MetricsTest ~/scrimmage/my-scrimmage-plugins \
 && ./generate-plugin.sh motion MotionTest ~/scrimmage/my-scrimmage-plugins \
 && ./generate-plugin.sh sensor SensorTest ~/scrimmage/my-scrimmage-plugins \
 && ./generate-plugin.sh controller ControllerTest ~/scrimmage/my-scrimmage-plugins \
 && ./generate-plugin.sh network NetworkTest ~/scrimmage/my-scrimmage-plugins

# Build scrimmage core, plugins, and documentation
WORKDIR /root/scrimmage/scrimmage
RUN mkdir -p build \
 && cd build \
 && source ~/.bashrc \
 && source ~/.scrimmage/setup.bash \
 && cmake .. -G Ninja -DBUILD_TESTS=ON -DCMAKE_CXX_FLAGS="-Werror" \
 && ninja

# install python package and run tests
WORKDIR /root/scrimmage/scrimmage/python
RUN pip install -e .

# run tests
WORKDIR /root/scrimmage/scrimmage/build
RUN source ~/.scrimmage/setup.bash && \
    export SCRIMMAGE_MISSION_PATH=$SCRIMMAGE_MISSION_PATH:$PWD && \
    export PYTHONPATH=$PYTHONPATH:$PWD/../test && \
    py.test ../test/test_openai.py && \
    export CTEST_OUTPUT_ON_FAILURE=1 && \
    ninja test && \
    scrimmage ../missions/straight-no-gui.xml && \
    scrimmage ../missions/straight_jsbsim.xml

# # build with clang
# RUN rm * -rf \
#  && export CC=/usr/bin/clang \
#  && export CXX=/usr/bin/clang++ \
#  && source ~/.scrimmage/setup.bash \
#  && cmake .. -G Ninja -DBUILD_TESTS=ON -DBUILD_DOCS=ON -DCMAKE_CXX_FLAGS="-Werror" \
#  && ninja \
#  && ninja docs website-docs \
#  && source ~/.scrimmage/setup.bash \
#  && export PYTHONPATH=$PYTHONPATH:$PWD/../test \
#  && export CTEST_OUTPUT_ON_FAILURE=1 \
#  && ninja test

# Test scrimmage_ros package integration
RUN mkdir -p /root/catkin_ws/src \
 && cd /root/catkin_ws/src \
 && git clone https://github.com/ros-planning/navigation_msgs \
 && git clone https://github.com/SyllogismRXS/scrimmage_ros.git \
 && cd /root/catkin_ws \
 && source /opt/ros/melodic/setup.bash \
 && source /opt/scrimmage/*/setup.sh \
 && catkin_make \
 && source devel/setup.bash \
 && source ~/.scrimmage/setup.bash \
 && cd build \
 && make tests \
 && make test

WORKDIR /root/scrimmage/scrimmage
RUN /bin/bash -c "source ~/.scrimmage/setup.bash && py.test python/tests"

# Setup the scrimmage docker image to run as an executable
ENTRYPOINT ["/root/scrimmage/scrimmage/ci/scripts/scrimmage-wrapper.sh"]
CMD ["/root/scrimmage/scrimmage/missions/straight-no-gui.xml"]
